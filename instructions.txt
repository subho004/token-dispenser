#step 1: npx create-react-app token-dispenser
#step 2: cd token-dispenser
#step 3: npm install ethers hardhat @nomiclabs/hardhat-waffle ethereum-waffle chai @nomiclabs/hardhat-ethers
#step 4: npm install react-bootstrap bootstrap@4.6.0
#step 5: npm install @openzeppelin/contracts
--Installing all required packages & dependencies done.
#step 6: Inside /src folder delete App.Tests.js, logo.svg, setupTests.js
#step 7: npx hardhat run
#step 8: Create Basic Hardhat Project (If it asks you to install or run a command please do the same)
#Step 9: Edit .gitignore file
        Add .env into the second line. This is how the file looks:
        # misc
        .env 
        .DS_Store
        .env.local
        .env.development.local
        .env.test.local
        .env.production.local
#Step 10: Edit hardhat.conig.js & Add artifacts path, as wells as the chainId for Metamask.
          This is how the file looks:
            require("@nomiclabs/hardhat-waffle");
            require('dotenv').config()

            // This is a sample Hardhat task. To learn how to create your own go to
            // https://hardhat.org/guides/create-task.html
            task("accounts", "Prints the list of accounts", async () => {
            const accounts = await ethers.getSigners();

            for (const account of accounts) {
                console.log(account.address);
            }
            });

            // You need to export an object to set up your config
            // Go to https://hardhat.org/config/ to learn more

            /**
            * @type import('hardhat/config').HardhatUserConfig
            */
            module.exports = {
            paths: {
                artifacts: './src/artifacts',
            },

            networks: {
                hardhat: {
                chainId: 1337
                },
            },
            solidity: "0.8.3"
            };
#Step 11: Go to RemixIDE & Create, Test & Deploy the Token Contract.(https://remix.ethereum.org/)
				  This is how the Token Smart Contract looks like:
            pragma solidity ^0.8.3;

            import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

            contract XARToken is ERC20 {

                constructor(string memory name, string memory symbol) ERC20(name, symbol) {
                    _mint(msg.sender, 100000 * (10 ** 18));
                }

                function faucet (address recipient , uint amount) external {
                _mint(recipient, amount);
                }
            }
#Step 12: Go to the /contracts folder & create a file called as XARToken.sol & paste the above Smart Contract code their.
#Step 13: Open a new terminal/CMD & type: 
          npx hardhat node 
#Step 14: Open scripts/deploy.js (if you see SmapleScript.js or anything like that then delete it & create deploy.js)
          This is how the file looks:
            const hre = require("hardhat");

            async function main() {
            const [deployer] = await hre.ethers.getSigners();

            console.log("Deploying contracts with the account:", deployer.address);

            const XARToken = await hre.ethers.getContractFactory("XARToken");
            const xarToken = await XARToken.deploy("XARToken", "TKN");

            await xarToken.deployed();

            console.log("Token deployed to:", xarToken.address);
            }

            main()
            .then(() => process.exit(0))
            .catch((error) => {
                console.error(error);
                process.exit(1);
            });
#Step 15: Open a new Terminal or CMD & Compile the Contract by typing in:
          npx hardhat compile
#Step 16: Will deploy the compiled smart contract by typing in:
          npx hardhat run scripts/deploy.js --network localhost
#Step 17: using React we are gonna build a frontend, primarily consisting of: Buttons, Check Balance, Send XAR, Amount, address input, etc.
            Go to /src/app.css 
            Remove all the code inside this file
#Step 18: Add some Css styling for token dispense, following is the code:
            .App {
            text-align: center;
            background-color: rgba(252, 203, 250, 0.65);
            height: 100%;
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            }

            .App-header {
            background-color: rgb(253, 204, 251);
            padding: 20px;
            color: white;
            }

            .App-intro {
            font-size: large;
            }
#Step 19: Remove all the code in /src/App.js file, then paste the code below:
            import './App.css';
            import XARToken from './artifacts/contracts/XARToken.sol/XARToken.json'

            function App() {
                const Token = XARToken;

                return (
                    <div className="App">
                    </div>
                );
            }

            export default App;
#Step 20: type this command in terminial to launch your website:
            npm run start
#Step 21: Adding some more lines of code to App.js in /src/App.js (This is to add some components to the website):
            import './App.css';
            import XARToken from './artifacts/contracts/XARToken.sol/XARToken.json';
            import 'bootstrap/dist/css/bootstrap.min.css'
            import {Container, Row, Col } from 'react-bootstrap';

            function App() {
                const Token = XARToken;

                return (
                    <div className="App">
                    <Container>
                    <Row className="justify-content-md-center">
                        <Col>
                        <div>My Token Dispenser</div>
                        </Col>
                        <Col>
                        <div> our sending area</div>
                        </Col>
                    </Row>
                    </Container>
                    </div>
                );
            }

            export default App;
#Step 22: Add the Dispenser Component to App.js file after 21st line or the </div> tag:
          <Dispenser tokenContract={Token}/>
#Step 23: Inside the /src folder create a new folder "components" inside components folder create a file called as "Dispenser.js" & add this code:
            import { useState } from 'react';
            import { ethers } from 'ethers'
            import Card from 'react-bootstrap/Card'
            import Button from 'react-bootstrap/Button'

            const tokenAddress = "{YOUR DEPLOYED TOKEN ADDRESS}"

            const Dispenser = (props) => {

            const [balance, setBalance] = useState()
            const [showBalance, setShowBalance] = useState(false)


            async function getBalance() {
                if (typeof window.ethereum !== 'undefined') {
                const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })
                const provider = new ethers.providers.Web3Provider(window.ethereum);
                const contract = new ethers.Contract(tokenAddress, props.tokenContract.abi, provider)
                const balance = await contract.balanceOf(account);
                console.log("Balance: ", balance.toString());
                setBalance(balance.toString());
                setShowBalance(true);
                }
            }

            async function dispenser() {
                if (typeof window.ethereum !== 'undefined') {
                const account = await window.ethereum.request({ method: 'eth_requestAccounts' });
                const provider = new ethers.providers.Web3Provider(window.ethereum);
                const signer = provider.getSigner();
                const contract = new ethers.Contract(tokenAddress, props.tokenContract.abi, signer);
                contract.dispenser(account[0], 100);
                }
            }
                return (
                    <div>
                    <Card style={{background: "rgba(227, 104, 222, 0.71)"}}>
                    <Card.Body>
                    <Card.Subtitle>recieve dispenser ERC20 to your wallet
                    </Card.Subtitle><br></br>
                    <div className="d-grid gap-2">
                    <Button onClick={dispenser}>get dispenser token!</Button>
                    <Button onClick={getBalance} variant="warning">check my balance</Button>   
                    </div>
                    </Card.Body>
                    </Card>
                    </div>
                )
            }

            export default Dispenser
#Step 24: Import Dispenser component in App.js & couple of more tweaks, code is below:
            import './App.css';
            import XARToken from './artifacts/contracts/XARToken.sol/XARToken.json';
            import 'bootstrap/dist/css/bootstrap.min.css'
            import {Container, Row, Col } from 'react-bootstrap';
            import Dispenser from './components/Dispenser.js';

            function App() {
                const Token = XARToken;

                return (
                    <div className="App">
                    <Container>
                    <Row className="justify-content-md-center">
                        <Col>
                        <div>My Token Dispenser</div>
                        <Dispenser tokenContract={Token}/>
                        </Col>
                        <Col>
                        <div> our sending area</div>
                        </Col>
                    </Row>
                    </Container>
                    </div>
                );
            }

            export default App;
#Step 25: Let's Test the Dispenser Component
          So Launch the local blockchain node using "npm hardhat node"
#Step 26: Launch Browser & Open Metamask Extension & change from Ethereum Mainnet to Localhost......(If You dont see a Localhost option, select the show/hide option & Turn on Test networks.)
#Step 27: Select the Circle Avatar Icon & Select Import Account, then copy paste the First Account's private key from the terminal output after launching the local blockchain node into the metamask import account input section.
         then do "npm run start"
         then follow step 16 and copy the deployed address and paste into "dispenser.js" file       
#step 28: Create a new file called as Message.js in the components folder, code is below:   
         import Alert from 'react-bootstrap/Alert'

            const Message = ({ balance }) => {
                return (
                <div>
                <Alert variant="info"> balance : {balance}</Alert>
                </div>
            )
            }

            export default Message
#Step 29: Add Message component to the Dispenser component, by adding a couple of lines of code.
        import Message from './Message'
        then add this line
          { showBalance ? <Message balance={balance}/> : null }
#Step 30: Add TokenSend coponent to the App.js file inside the sending are part:
					<TokenSend tokenContract={Token}/>
#step 31: Create a New component called TokenSend.js & add the following code:
         import { useState } from 'react';
            import { ethers } from 'ethers'
            import Card from 'react-bootstrap/Card'
            import Button from 'react-bootstrap/Button'

            const tokenAddress = "{YOUR DEPLOYED TOKEN ADDRESS}"

            const TokenSend = (props) => {

            const [userAccount, setUserAccount] = useState()
            const [amount, setAmount] = useState()

            // request access to the user's MetaMask account
            async function requestAccount() {
                await window.ethereum.request({ method: 'eth_requestAccounts' });
            }

            async function sendCoins() {
            if (typeof window.ethereum !== 'undefined') {
                await requestAccount()
                const provider = new ethers.providers.Web3Provider(window.ethereum);
                const signer = provider.getSigner();
                const contract = new ethers.Contract(tokenAddress, props.tokenContract.abi, signer);
                const transation = await contract.transfer(userAccount, amount);
                await transation.wait();
                console.log(`${amount} Coins successfully sent to ${userAccount}`);
            }
            }
                return (
                    <Card style={{background: "rgba(227, 104, 222, 0.71)"}}>
                    <Card.Body>
                    <Card.Subtitle> send dispenser to an address
                    </Card.Subtitle>
                    <br></br>
                    <div className="d-grid gap-2">
                    <input onChange={e => setUserAccount(e.target.value)} placeholder="Payee 0x address" />
                    <input onChange={e => setAmount(e.target.value)} placeholder="Amount" />
                    <Button onClick={sendCoins} variant="success">send </Button>
                    </div>
                    </Card.Body>
                    </Card>
                )
            }

            export default TokenSend
#Step 32: import TokenSend.js into App.js, code is below:
					import TokenSend from './components/TokenSend.js';
#Step 34: Go to https://infura.io & signup.
#Step 35: Create New Project: PRODUCT: Ethereum, NAME: Test
#step 36: Copy & Save all the Project Details in a file & also change the ENDPOINTS to Goerli
        PROJECT ID: e200b858fa3c466bab43c03d684de9ba         //not mine
          PROJECT SECRET: 6d21c51498c142b59918bac5cf03129a
          https://mainnet.infura.io/v3/e200b858fa3c466bab43c03d684de9ba
					wss://mainnet.infura.io/ws/v3/e200b858fa3c466bab43c03d684de9ba
#Step 37: Make changes to the Hardhat Configuration:
        require("@nomiclabs/hardhat-waffle");
          require('dotenv').config()

          // This is a sample Hardhat task. To learn how to create your own go to
          // https://hardhat.org/guides/create-task.html
          task("accounts", "Prints the list of accounts", async () => {
            const accounts = await ethers.getSigners();

            for (const account of accounts) {
              console.log(account.address);
            }
          });

          // You need to export an object to set up your config
          // Go to https://hardhat.org/config/ to learn more

          /**
           * @type import('hardhat/config').HardhatUserConfig
           */
           module.exports = {
            paths: {
              artifacts: './src/artifacts',
            },
            networks: {
              hardhat: {
                chainId: 1337
              },
              goreli: {
                url: "{YOUR END POINT URL}",
                accounts: [`0x${process.env.PRIVATE_KEY}`]

              }
            },
            solidity: "0.8.3"
          };
#Step 38: Copy Paste just the Endpoint URL from infura into the url part in Hardhat configuration.
#Step 39: Go to Metamask Extension & make sure you are on Goerli, then click 3 dots, select account details & export private key. Copy that.
#Step 40: Go to .env file in you directory & add this code:
					PRIVATE_KEY="{YOUR-PRIVATE-KEY}"
          replace the {YOUR-PRIVATE-KEY} with private key copied from metamask extension.
#Step 41: Run this command in a new terminal so that we can launch our token on the Goerli testnet:
					npx hardhat run scripts/deploy.js --network goreli
#Step 42: Your Contract has been deployed in the Goerli Testnet Succesfully, you can check it by entering the Token Address in https://goerli.etherscan.io/
#Step 43: Change the token address in dispenser.js & tokensend.js to the one that you got as output after Goerli Deployment.